buildscript {
	ext {
		springBootVersion = '2.1.9.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'ch.so.agi'
//version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	compile group: 'org.postgresql', name: 'postgresql', version: '42.2.5'
	compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
	implementation('org.springframework.boot:spring-boot-starter-web')
	implementation('org.springframework.boot:spring-boot-starter-data-jdbc')
}

task buildDbImage(type:Exec) {
 	workingDir "$projectDir/docker/mock_db/build_image"
 	commandLine './build_image.sh'
}

task stopDb(type:Exec) {
 	commandLine 'docker', 'rm', '-f', 'pgdev_ews'
 	ignoreExitValue true
}

task startDb(type:Exec, dependsOn:stopDb) {
 	workingDir "$projectDir/docker/mock_db"
 	commandLine './run_image.sh', 'bg'
}

task copyDrillJar(type: Copy, dependsOn: build){
    from file("$buildDir/libs/heatdrill.jar")
    into file("$projectDir/docker/heatdrill/tmp")
}

task buildImage(type:Exec, dependsOn: copyDrillJar) {
	def githash = getCheckedOutGitCommitHash()
	def build_timestamp = getTimestamp()
	def version = getVersion(true)
  def shortVersion = getVersion(false)

 	workingDir "$projectDir/docker/heatdrill"
 	commandLine 'docker', 'build',
				'--no-cache', '--force-rm',
				'-t', "sogis/heatdrill:$version",
				'-t', "sogis/heatdrill:$shortVersion",
				'-t', "sogis/heatdrill:latest",
				'--label', "heatdrill.created=$build_timestamp", 
				'--label', "heatdrill.git_commit=$githash",
        '--label', "heatdrill.version=$version",
				'-f', 'Dockerfile',  '.'
}

task stopContainer(type:Exec) {
 	commandLine 'docker', 'rm', '-f', 'heatdrill'
 	ignoreExitValue true
}

task runImage(type:Exec){
 	workingDir "$projectDir/docker/heatdrill"
 	commandLine './run_image.sh', 'bg'
 	
 	dependsOn stopContainer
 	dependsOn buildImage
 	dependsOn startDb
}

task pushImage(type:Exec) {
    commandLine 'docker', 'image', 'push', '--all-tags', "sogis/heatdrill"
}

def getCheckedOutGitCommitHash() {
  'git log -1 --pretty=%H'.execute().text.trim()
}

def getTimestamp() {
    def date = new Date()
    return date.format('yyyy-MM-dd HH:mm:ss')
}

String getVersion(boolean useFullVersion){
    String version = "1.0"   

    if(useFullVersion)
        version = version + "." + getBuildNumber()

    return version
}

String getBuildNumber() {
    String val = System.getenv('GITHUB_RUN_NUMBER')

    if(val == null)
        val = 'localbuild'

    return val
}







